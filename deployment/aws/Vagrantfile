# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

  require 'yaml'
  settings = YAML.load_file 'settings/setting.yaml'
  config.vm.box = "dummy"

  config.vm.provider :aws do |aws, override|
    aws.access_key_id = settings['aws']['access_key_id']
    aws.secret_access_key = settings['aws']['secret_access_key']
    aws.keypair_name = settings['aws']['keypair_name']
    aws.security_groups = settings['aws']['security_groups']
    aws.region = settings['aws']['region']
    aws.ami = settings['aws']['ami']

    override.ssh.username = settings['aws']['ssh_username']
    override.ssh.private_key_path = settings['aws']['private_key_path']
  end

  config.vm.provision "chef_solo" do |chef|
    chef.node_name = "lora"

    chef.json = {
      "lora" => {
        "database" => settings['microservice']['database'],
        "protocol" => settings['microservice']['protocol'],
        "middleware_handler" => settings['microservice']['middleware_handler'],
        "elasticIndex" => settings['microservice']['elasticIndex'],
        "elasticHost" => settings['microservice']['elasticHost'],
        "elasticPort" => settings['microservice']['elasticPort'],
        "dbUrl" => settings['microservice']['dbUrl'],
        "dbUsername" => settings['microservice']['dbUsername'],
        "dbPassword" => settings['microservice']['dbPassword'],
        "ttnRegion" => settings['microservice']['ttnRegion'],
        "ttnAppId" => settings['microservice']['ttnAppId'],
        "ttnAccessKey" => settings['microservice']['ttnAccessKey'],
        "ttnHttpUrl" => settings['microservice']['ttnHttpUrl'],
        "ttnDeviceFormat" => settings['microservice']['ttnDeviceFormat'],
        "proximusTokenUrl" => settings['microservice']['proximusTokenUrl'],
        "proximusApiKey" => settings['microservice']['proximusApiKey'],
        "proximusApiSecret" => settings['microservice']['proximusApiSecret'],
        "proximusDownlinkUrl" => settings['microservice']['proximusDownlinkUrl'],
        "proximusDeviceId" => settings['microservice']['proximusDeviceId']
      }
    }

    chef.add_recipe "default"
    if settings['microservice']['database'] == "elastic"
      chef.add_recipe "elastic"
    elsif settings['microservice']['database'] == "postgresql"
        chef.add_recipe "postgresql"
    end
    chef.add_recipe "microservice"
  end



  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
